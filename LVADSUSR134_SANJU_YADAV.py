# -*- coding: utf-8 -*-
"""python assesment2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YOe2ZoP1SoCRh-SgschqzIT6kX5i8iZv

Q1
"""

import numpy as np

def RGBscale(RGB_image):
    grayimage = np.empty((RGB_image.shape[0], RGB_image.shape[1]), dtype=np.uint8)
    for i in range(RGB_image.shape[0]):
        for j in range(RGB_image.shape[1]):
            R, G, B = RGB_image[i, j]
            grayscale_value = 0.2989 * R + 0.5870 * G + 0.1140 * B
            grayimage[i, j] = grayscale_value

    return grayimage
RGB_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],[[255, 255, 0], [255, 0, 255], [0, 255, 255]],[[127, 127, 127], [200, 200, 200], [50, 50, 50]]])
grayimage = RGBscale(RGB_image)
print("Image:")
print(grayimage)

"""Q2"""

import numpy as np
def normalize_data(data):
    means = np.mean(data, axis=0)
    stds = np.std(data, axis=0)
    normalized_data = data - means
    normalized_data /= stds
    return normalized_data
health_data = np.array([[120, 65, 30], [140, 70, 35], [200, 60, 25]])
normalized_health_data = normalize_data(health_data)
print("Normalized Health Data:")
print(normalized_health_data)

"""Q3"""

import numpy as np
data = np.array([[[4, 3, 2],
                  [4, 5, 6]],

                 [[7, 8, 9],
                  [10, 11, 12]],

                 [[13, 14, 15],
                  [16, 17, 18]]])
flattened_data = data.reshape(data.shape[0], -1)
reshaped_data = flattened_data.reshape(data.shape[0], -1)
print(f"flattened data \n {flattened_data}")
print("\nReshaped data where each sensor's data form single row:")
print(reshaped_data)

"""Q4"""

import numpy as np
data = np.random.randint(0, 100, size=(10, 5))
first_game_scores = data[:, 0]
last_game_scores = data[:, -1]

improvement = last_game_scores - first_game_scores
for i, imp in enumerate(improvement):
    print(f"player {i+1}: Imp = {imp}")

"""Q5"""

import numpy as np
scores = np.array([[80, 75, 85, -1, 90],
                   [70, 85, 75, 80, 82],
                   [90, 92, 88, 85, -1]])
last_three_subjects = scores[:, -3:]
valid_scores = np.ma.masked_equal(last_three_subjects, -1)
average_scores = valid_scores.mean(axis=1)

print("ans")
print(average_scores)

"""Q6"""

import numpy as np

def adjustedtemp(temperatures, adjustment_factors):
    adjustment_factors = adjustment_factors.reshape(1, -1)
    adjusted_temperatures = temperatures * adjustment_factors

    return adjusted_temperatures



"""Q7"""

import pandas as pd

data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'Age': [25, 30, 35, 40, 45, 50, 55],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}
df = pd.DataFrame(data)
filtered_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]
result = filtered_df[['Name', 'City']]

print(result)

"""Q8"""

import pandas as pd
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
fruit_df = df[df['Category'] == 'Fruit']
average_price_fruit = fruit_df['Price'].mean()
above_average_price_fruit = fruit_df[fruit_df['Price'] > average_price_fruit]
pc = above_average_price_fruit[above_average_price_fruit['Promotion'] == False]

print("the fruits are")
print(pc)

"""Q9"""

import pandas as pd
employee_data = pd.DataFrame({
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']})
project_data = pd.DataFrame({
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']})
merged_data = pd.merge(employee_data, project_data, on='Employee', how='left')
department_overview = merged_data.groupby('Department')['Project'].apply(list).reset_index()
department_overview['Manager'] = merged_data.groupby('Department')['Manager'].first().reset_index()['Manager']
print("Department Overview:")
print(department_overview)

"""Q10"""

import pandas as pd
data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}
df = pd.DataFrame(data)
total_sales_per_dept = df.groupby('Department')['Sales'].sum()
num_salespeople_per_dept = df['Department'].value_counts()
average_sales_per_salesperson_per_dept = total_sales_per_dept / num_salespeople_per_dept
ranked_departments = average_sales_per_salesperson_per_dept.sort_values(ascending=False)

print("Average Sales per Salesperson by Department:")
print(ranked_departments)

